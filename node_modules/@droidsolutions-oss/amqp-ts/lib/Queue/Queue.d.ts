import * as AmqpLib from "amqplib/callback_api";
import { AmqpProperties } from "..";
import { Binding } from "../Binding";
import { Connection } from "../Connection/Connection";
import { Exchange } from "../Exchange/Exchange";
import { Message } from "../Message";
import { DeclarationOptions } from "./DeclarationOptions";
import { DeleteResult } from "./DeleteResult";
import { InitializeResult } from "./InitializeResult";
import { StartConsumerResult } from "./StartConsumerResult";
/** Represents an AQMP queue. */
export declare class Queue {
    connection: Connection;
    private options;
    /** A promise that resolves once the conneciton is initialized and the channel is created. */
    initialized: Promise<InitializeResult>;
    /** The AMQP channel. */
    _channel: AmqpLib.Channel;
    /** A promise that resolves when a consumer handler is registered and initialized. */
    _consumerInitialized: Promise<StartConsumerResult>;
    private _name;
    _consumer: (msg: any, channel?: AmqpLib.Channel) => any;
    private _consumerOptions;
    private _consumerTag;
    private _consumerStopping;
    private _deleting;
    private _closing;
    private log;
    /** Returns the name of the queue. */
    get name(): string;
    /**
     * Initializes a new instance of the @see Queue class.
     *
     * @summary Waits until the given connection is initialized, then creates a channel on it and declares a queue with
     * the given name.
     * @param connection The AMQP connection.
     * @param name The name of the queue.
     * @param options Any queue declaring options.
     * @constructor
     */
    constructor(connection: Connection, name: string, options?: DeclarationOptions);
    /** Waits until the connection is initialized then creates a channel and declares the queue on it. */
    _initialize(): void;
    /**
     * Directly sends a message to the underlying queue.
     *
     * @param message The AMQP message.
     */
    send(message: Message): void;
    rpc(requestParameters: any): Promise<Message>;
    /**
     * Sets the prefetch of the current quere. This limits the amount of unacknowledged messages on a channel. If you
     * already specified this in the options in the constructor you don't need to set it here again.
     *
     * For more information see {@link https://www.rabbitmq.com/consumer-prefetch.html}.
     * @param count The maximum number of unacknowledged messages send to each listener of this queue.
     */
    prefetch(count: number): void;
    recover(): Promise<void>;
    /**
     * Actives a consumer by binding the given handler to this queue.
     *
     * @param onMessage The message handler that is executed when a new message arrives.
     * @param options Options for underlying amqplib. See
     * {@link https://www.squaremobius.net/amqp.node/channel_api.html#channel_consume} for more info. You can also
     * specify AMQP properties to set on reply messages that are fired when the given onMessage handler returns anything.
     * @throws {Error} Rejects when a consumer is already bound to this queue.
     * @returns A promise that resolves once the handler is bound to the queue.
     */
    activateConsumer(onMessage: (msg: Message) => any, options?: AmqpLib.Options.Consume & {
        properties?: AmqpProperties;
    }): Promise<StartConsumerResult>;
    /**
     * Initializes the consumer with a handler function. Resolves the @see _consumerInitialized promise once the handler
     * is bound.
     */
    _initializeConsumer(): void;
    /**
     * Completely removes the consumer handler and cancels the channel.
     */
    stopConsumer(): Promise<void>;
    /**
     * Removes any bindings of this queue, the consumer handler and then deletes the queue.
     */
    delete(): Promise<DeleteResult>;
    /**
     * Remoevs bindings of this queue as well as the consumer handler and then closes the AMQP channel.
     */
    close(): Promise<void>;
    /**
     * Binds the queue to the given exchange.
     *
     * @param source The exchange on which to bind the queue.
     * @param pattern The pattern to use.
     * @param args Any arguments.
     */
    bind(source: Exchange, pattern?: string, args?: any): Promise<Binding>;
    /**
     * Unbinds the queue from the given exchange by deleting the binding.
     *
     * @param source The exchange to unbind from.
     * @param pattern The pattern the queue was bind with.
     * @param _args Any additional arguments.
     */
    unbind(source: Exchange, pattern?: string, _args?: any): Promise<void>;
    private handleReceivedMessageEvent;
}
